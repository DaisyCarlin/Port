# -*- coding: utf-8 -*-
"""Housing_Price_Predictor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Oybrt8OOljbAF0VBo2YKek82Oiu6a6i3
"""



!pip install numpy
!pip install pandas
!pip install matplotlib
!pip install seaborn
!pip install kaggle

pip install scikit-learn

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!unzip housing_price_dataset.csv

import pandas as pd
Housing = pd.read_csv("housing_price_dataset.csv")

Housing

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

Housing.info()

Housing.dropna()

Housing.dropna(inplace=True)

Housing = Housing.drop('Neighborhood', axis=1)

Housing.info()



from sklearn.model_selection import train_test_split

X = Housing.drop(['Price'], axis = 1)
y = Housing['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

train_Housing = X_train.join(y_train)

train_Housing

train_Housing.hist(figsize=(15,8))

train_Housing

plt.figure(figsize=(15,8))
sns.heatmap (train_Housing.corr(), annot = True, cmap= 'coolwarm')

train_Housing.hist(figsize=(15,8))

import pandas as pd
from sklearn.linear_model import LinearRegression

X_train, y_train = train_Housing.drop(['Price'], axis=1), train_Housing['Price']

reg = LinearRegression()

reg.fit(X_train, y_train)

correlation = train_Housing['SquareFeet'].corr(train_Housing['YearBuilt'])

print("Correlation between Square Feet and Year Built:", correlation)

test_Housing = X_train.join(y_test)

test_Housing['Bedrooms'] = np.log(test_Housing['Bedrooms'] + 1)
test_Housing['Bathrooms'] = np.log(test_Housing['Bathrooms'] + 1)
test_Housing['SquareFeet'] = np.log(test_Housing['SquareFeet'] + 1)
test_Housing['YearBuilt'] = np.log(test_Housing['YearBuilt'] + 1)

correlation = test_Housing['SquareFeet'].corr(test_Housing['YearBuilt'])

!pip install scikit-learn
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print(test_Housing.isnull().sum())

reg.score(X_test, y_test)

from sklearn.ensemble import RandomForestRegressor

forest = RandomForestRegressor()
forest.fit(X_train, y_train)

forest.score(X_test, y_test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)

from sklearn.model_selection import GridSearchCV

Param_grid = {
    "n_estimators": [3, 10, 30],
    "max_features": [2, 4, 6, 8],

}

grid_search = GridSearchCV(forest, Param_grid, cv=5,
                           scoring="neg_mean_squared_error",
                           return_train_score=True)

grid_search.fit(X_train, y_train)

forest.score(X_test, y_test)

grid_search.best_estimator_

best_forest = grid_search.best_estimator_
